"""following the evaluation script of DrQA"""

from collections import Counter
import string
import re
from typing import List
import logging
import pandas as pd

logger = logging.getLogger(__name__)


def normalize_answer(s: str) -> str:
    """Lower text and remove punctuation, articles and extra whitespace."""

    def remove_articles(text):
        return re.sub(r'\b(a|an|the)\b', ' ', text)

    def white_space_fix(text):
        return ' '.join(text.split())

    def remove_punc(text):
        exclude = set(string.punctuation)
        return ''.join(ch for ch in text if ch not in exclude)

    def lower(text):
        return text.lower()

    return white_space_fix(remove_articles(remove_punc(lower(s))))


def f1_score(prediction: str, ground_truth: str) -> float:
    prediction_tokens = normalize_answer(prediction).split()
    ground_truth_tokens = normalize_answer(ground_truth).split()
    common = Counter(prediction_tokens) & Counter(ground_truth_tokens)
    num_same = sum(common.values())
    if num_same == 0:
        return 0
    precision = 1.0 * num_same / len(prediction_tokens)
    recall = 1.0 * num_same / len(ground_truth_tokens)
    f1 = (2 * precision * recall) / (precision + recall)
    return f1


def exact_match_score(prediction: str, ground_truth: str) -> bool:
    return normalize_answer(prediction) == normalize_answer(ground_truth)


def metric_max_over_ground_truths(metric_fn, prediction: str, ground_truths: List[str]):
    scores_for_ground_truths = []
    for ground_truth in ground_truths:
        score = metric_fn(prediction, ground_truth)
        scores_for_ground_truths.append(score)
    return max(scores_for_ground_truths)


def regex_match_score(prediction: str, pattern: str) -> bool:
    """Check if the prediction matches the given regular expression."""
    try:
        compiled = re.compile(
            pattern,
            flags=re.IGNORECASE + re.UNICODE + re.MULTILINE
        )
    except BaseException:
        logger.warning('Regular expression failed to compile: %s' % pattern)
        return False
    return compiled.match(prediction) is not None


def retrieval_accuracy(answer: str, documents: List[str]) -> float:
    if not documents:
        return 0
    total = float(len(documents))
    hits = 0
    for d in documents:
        if answer in d:
            hits += 1

    return hits / total


def evaluation_at_k(true_answers, predicted_answers):
    """ Returns evaluation scores for each predicted answer. It assumes
    answers are sorted in terms of relevance. The most relevant answer
    is consider k=0.

    """
    R = []
    if len(predicted_answers) > 0:
        for i, pred_answer in enumerate(predicted_answers):
            results = {}
            results.update({"f1_score": metric_max_over_ground_truths(f1_score, pred_answer, true_answers)})
            results.update(
                {"exact_match_score": metric_max_over_ground_truths(exact_match_score, pred_answer, true_answers)})
            results.update(
                {"regex_match_score": metric_max_over_ground_truths(regex_match_score, pred_answer, true_answers)})
            R.append({"k": i, "answer": pred_answer, "results": results})
    return R


def compute_global_evaluation(results_json):
    """ Compute global evaluation scores for an input results json file
    as generated by the evaluation.py script
    """
    # We don't know which metrics were coputed in advanced, so let's figure this out
    metrics = []
    K = 0
    for item in results_json["results"]:
        if len(item["evaluation"]) == 0: continue
        for eval_item in item["evaluation"]:
            metrics = [metric for metric in eval_item["results"].keys()]
            K = eval_item["k"]
            break

    print(f"Metrics found in the dataset: {metrics}")

    # Parse results structure and store k and metrics
    data = []
    for item in results_json["results"]:
        if len(item["evaluation"]) == 0:
            # no answers were returned, set metrics to 0 and keep track
            for k in range(K + 1):
                row = [k, False] + [0 for metric in metrics]
                data.append(row)
        else:
            # answers were returned
            for eval_item in item["evaluation"]:
                row = [eval_item["k"], True] + [float(score) for metric, score in eval_item["results"].items()]
                data.append(row)

    # convert to dataframe
    df_results = pd.DataFrame(data, columns=["k", "did_return_answers"] + metrics)

    # show averages per k
    for k, group in df_results.groupby(["k"]):
        print()
        print(f"k:{k}, including un-answered questions")
        print(group.describe())

    # Exlude an-unswered
    df_results_answered = df_results[df_results.did_return_answers == True]
    # show averages per k
    for k, group in df_results_answered.groupby(["k"]):
        print()
        print(f"k:{k}, only answered questions")
        print(group.describe())